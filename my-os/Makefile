# Makefile for my-os

# Here I define the cross-compilation tools.
CROSS_PREFIX = i686-elf-
ASM = $(CROSS_PREFIX)as
GCC = $(CROSS_PREFIX)gcc
LD = $(CROSS_PREFIX)ld
OBJCOPY = $(CROSS_PREFIX)objcopy
GRUB_MKRESCUE = $(CROSS_PREFIX)grub-mkrescue

# These are the flags I'll use for the compiler and linker.
ASMFLAGS = 
GCCFLAGS = -ffreestanding -O2 -Wall -Wextra -I src
LDFLAGS = -T src/linker.ld

# I'm defining the output and intermediate files here.
BOOT_OBJ = build/boot.o
KERNEL_OBJ = build/kernel.o
IDT_OBJ = build/idt.o
GDT_OBJ = build/gdt.o
PIC_OBJ = build/pic.o
TIMER_OBJ = build/timer.o
SCHEDULER_OBJ = build/scheduler.o
OBJS = $(BOOT_OBJ) $(KERNEL_OBJ) $(IDT_OBJ) $(GDT_OBJ) $(PIC_OBJ) $(TIMER_OBJ) $(SCHEDULER_OBJ)
KERNEL_BIN = build/kernel.bin
ISO_DIR = build/isodir
ISO_FILE = build/my-os.iso

# I'm marking these targets as phony because they don't represent actual files.
.PHONY: all clean run

# This is my default target; it creates the ISO image.
all: $(ISO_FILE)

# I use this target to run the OS in QEMU.
run: $(ISO_FILE)
	qemu-system-i386 -cdrom $(ISO_FILE)

# This target cleans up the files generated by my build process.
clean:
	rm -rf build

# Here's how I create the ISO image.
$(ISO_FILE): $(KERNEL_BIN)
	mkdir -p $(ISO_DIR)/boot/grub
	cp $(KERNEL_BIN) $(ISO_DIR)/boot/
	cp grub/grub.cfg $(ISO_DIR)/boot/grub/
	$(GRUB_MKRESCUE) -o $(ISO_FILE) $(ISO_DIR)

# I link the object files to create the final kernel binary.
$(KERNEL_BIN): $(OBJS)
	$(LD) $(LDFLAGS) -o $(KERNEL_BIN) $(OBJS)

# I compile the assembly boot file with this rule.
$(BOOT_OBJ): src/boot.s
	mkdir -p build
	$(GCC) -c $< -o $@

# And here I compile my C kernel file.
$(KERNEL_OBJ): src/kernel.c
	mkdir -p build
	$(GCC) $(GCCFLAGS) -c $< -o $@

# Compile the IDT file.
$(IDT_OBJ): src/idt.c
	mkdir -p build
	$(GCC) $(GCCFLAGS) -c $< -o $@

# Compile the GDT file.
$(GDT_OBJ): src/gdt.c
	mkdir -p build
	$(GCC) $(GCCFLAGS) -c $< -o $@

# Compile the PIC file.
$(PIC_OBJ): src/pic.c
	mkdir -p build
	$(GCC) $(GCCFLAGS) -c $< -o $@

# Compile the TIMER file.
$(TIMER_OBJ): src/timer.c
	mkdir -p build
	$(GCC) $(GCCFLAGS) -c $< -o $@

# Compile the SCHEDULER file.
$(SCHEDULER_OBJ): src/scheduler.c
	mkdir -p build
	$(GCC) $(GCCFLAGS) -c $< -o $@
